trigger:
- release_test

pr: none

jobs:

# # LINUX

#   - job: LinuxBuild
#     pool:
#       vmImage: 'Ubuntu-16.04'

#     container: trailofbits/osql:ubuntu-18.04

#     steps:
#     - script: mkdir $(Build.BinariesDirectory)/build
#       displayName: "Create build folder"

#     - task: CMake@1
#       displayName: "Configure osquery"
#       inputs:
#         workingDirectory: $(Build.BinariesDirectory)/build
#         cmakeArgs: -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_TESTING=ON -DPACKAGING_SYSTEM=DEB $(Build.SourcesDirectory)

#     - task: CMake@1
#       displayName: "Build osquery"
#       inputs:
#         workingDirectory: $(Build.BinariesDirectory)/build
#         cmakeArgs: --build . -j 3

#     - script: |
#         tar -H posix -cf $(Build.ArtifactStagingDirectory)/build.tar build
#       displayName: "Tar the build folder"
#       workingDirectory: $(Build.BinariesDirectory)

#     - script: |
#         tar -H posix -cf $(Build.ArtifactStagingDirectory)/source.tar .
#       displayName: "Tar the source folder"
#       workingDirectory: $(Build.SourcesDirectory)

#     - task: PublishBuildArtifacts@1
#       displayName: "Publish build folder for the next job"
#       inputs:
#         pathtoPublish: $(Build.ArtifactStagingDirectory)/build.tar
#         artifactName: linux-osquery-build

#     - task: PublishBuildArtifacts@1
#       displayName: "Publish source folder for the packaging job"
#       inputs:
#         pathtoPublish: $(Build.ArtifactStagingDirectory)/source.tar
#         artifactName: linux-osquery-source


#   - job: LinuxTest

#     pool:
#       vmImage: 'Ubuntu-16.04'

#     container: trailofbits/osql:ubuntu-18.04

#     dependsOn: LinuxBuild

#     steps:
#     - checkout: none

#     - task: DownloadBuildArtifacts@0
#       displayName: "Download build folder"
#       inputs:
#         artifactName: linux-osquery-build
#         downloadPath: $(Build.BinariesDirectory)

#     - script: |
#         tar -xvf linux-osquery-build/build.tar
#       displayName: "Untar build folder"
#       workingDirectory: $(Build.BinariesDirectory)

#     - script: |
#         ctest --build-nocmake -V
#       displayName: "Run tests"
#       workingDirectory: $(Build.BinariesDirectory)/build
#       env:
#         GTEST_COLOR: 1


#   - job: LinuxPackaging
#     condition: always()

#     pool:
#       vmImage: 'Ubuntu-16.04'

#     container: trailofbits/osql:ubuntu-18.04

#     dependsOn: LinuxTest

#     steps:
#     - checkout: none

#     - task: DownloadBuildArtifacts@0
#       displayName: "Download build folder"
#       inputs:
#         artifactName: linux-osquery-build
#         downloadPath: $(Build.BinariesDirectory)

#     - task: DownloadBuildArtifacts@0
#       displayName: "Download source folder"
#       inputs:
#         artifactName: linux-osquery-source
#         downloadPath: $(Build.BinariesDirectory)

#     - script: |
#         tar -xvf linux-osquery-build/build.tar
#       displayName: "Untar build folder"
#       workingDirectory: $(Build.BinariesDirectory)

#     - script: |
#         tar -xvf linux-osquery-source/source.tar -C $(Build.SourcesDirectory)
#       displayName: "Untar source folder"
#       workingDirectory: $(Build.BinariesDirectory)

#     - script: |
#         cmake --build . --target package -j 3
#         version=`echo osquery-*.deb | awk -F '-' '{ print $2 }'`; echo -n '##vso[task.setvariable variable=version]'; echo $version
#         echo -n '##vso[task.setvariable variable=package_name]'; tmp=`echo osquery*.deb`; echo ${tmp,,}
#         mkdir $(Build.ArtifactStagingDirectory)/package
#         mv osquery*.deb $(Build.ArtifactStagingDirectory)/package
#       displayName: "Create package"
#       workingDirectory: $(Build.BinariesDirectory)/build

#     - task: UniversalPackages@0
#       displayName: Publish DEB package to Artifact Feed
#       inputs:
#         command: publish
#         publishDirectory: '$(Build.ArtifactStagingDirectory)/package'
#         vstsFeedPublish: 'osql_releases'
#         vstsFeedPackagePublish: '$(package_name)'
#         packagePublishDescription: 'osql official Linux release version $(version)'
#         versionOption: custom
#         versionPublish: $(version)


# # LINUX

# # MACOS

#   - job: macOSBuild

#     pool:
#       vmImage: macos-10.14

#     steps:
#       - script: |
#           brew upgrade
#           brew install llvm@6 ccache
#         displayName: "Install Homebrew and prerequisites"
#         timeoutInMinutes: 20

#       - script: mkdir $(Build.BinariesDirectory)/build
#         displayName: "Create build folder"

#       - task: CMake@1
#         displayName: "Configure osquery"
#         inputs:
#           workingDirectory: $(Build.BinariesDirectory)/build
#           cmakeArgs: -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/local/opt/llvm@6/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm@6/bin/clang++ -DBUILD_TESTING=ON $(Build.SourcesDirectory)

#       - task: CMake@1
#         displayName: "Build osquery"
#         inputs:
#           workingDirectory: $(Build.BinariesDirectory)/build
#           cmakeArgs: --build . -j 3

#       - script: |
#           tar -cf $(Build.ArtifactStagingDirectory)/build.tar build
#         displayName: "Tar the build folder"
#         workingDirectory: $(Build.BinariesDirectory)

#       - script: |
#           tar -cf $(Build.ArtifactStagingDirectory)/source.tar .
#         displayName: "Tar the source folder"
#         workingDirectory: $(Build.SourcesDirectory)

#       - task: PublishBuildArtifacts@1
#         displayName: "Publish build folder for the next job"
#         inputs:
#           pathtoPublish: $(Build.ArtifactStagingDirectory)/build.tar
#           artifactName: macos-osquery-build

#       - task: PublishBuildArtifacts@1
#         displayName: "Publish source folder for the packaging job"
#         inputs:
#           pathtoPublish: $(Build.ArtifactStagingDirectory)/source.tar
#           artifactName: macos-osquery-source


#   - job: macOSTest

#     pool:
#       vmImage: macos-10.14

#     dependsOn: macOSBuild

#     steps:
#     - checkout: none

#     - task: DownloadBuildArtifacts@0
#       displayName: "Download build folder"
#       inputs:
#         artifactName: macos-osquery-build
#         downloadPath: $(Build.BinariesDirectory)

#     - script: |
#         tar -xvf macos-osquery-build/build.tar
#       displayName: "Untar build folder"
#       workingDirectory: $(Build.BinariesDirectory)

#     - script: |
#         ctest --build-nocmake -V
#       displayName: "Run tests"
#       workingDirectory: $(Build.BinariesDirectory)/build
#       env:
#         GTEST_COLOR: 1


#   - job: macOSPackaging
#     condition: always()

#     pool:
#       vmImage: macos-10.14

#     dependsOn: macOSTest

#     steps:
#     - checkout: none

#     - task: DownloadBuildArtifacts@0
#       displayName: "Download build folder"
#       inputs:
#         artifactName: macos-osquery-build
#         downloadPath: $(Build.BinariesDirectory)

#     - task: DownloadBuildArtifacts@0
#       displayName: "Download source folder"
#       inputs:
#         artifactName: macos-osquery-source
#         downloadPath: $(Build.BinariesDirectory)

#     - script: |
#         tar -xvf macos-osquery-build/build.tar
#       displayName: "Untar build folder"
#       workingDirectory: $(Build.BinariesDirectory)

#     - script: |
#         tar -xvf macos-osquery-source/source.tar -C $(Build.SourcesDirectory)
#       displayName: "Untar source folder"
#       workingDirectory: $(Build.BinariesDirectory)

#     - script: |
#         cmake --build . --target package -j 3
#         version=`echo osquery-*.pkg | awk -F '-' '{ print $2 }'`; echo -n '##vso[task.setvariable variable=version]'; echo $version
#         echo -n '##vso[task.setvariable variable=package_name]'; echo osquery*.pkg | awk '{ print tolower($0) }'
#         mkdir $(Build.ArtifactStagingDirectory)/package
#         mv osquery*.pkg $(Build.ArtifactStagingDirectory)/package
#       displayName: "Create package"
#       workingDirectory: $(Build.BinariesDirectory)/build

#     - task: UniversalPackages@0
#       displayName: Publish PKG package to Artifact Feed
#       inputs:
#         command: publish
#         publishDirectory: '$(Build.ArtifactStagingDirectory)/package'
#         vstsFeedPublish: 'osql_releases'
#         vstsFeedPackagePublish: '$(package_name)'
#         packagePublishDescription: 'osql official macOS release version $(version)'
#         versionOption: custom
#         versionPublish: $(version)
# # MACOS

# WINDOWS

  - job: WindowsBuild

    pool:
      vmImage: vs2017-win2016

    steps:
      - script: |
          choco install ninja
        displayName: Install the Ninja build system

      - powershell: |
          mkdir $(Build.BinariesDirectory)\build
        displayName: "Create build folder"

      - script: |
          call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
          cmake -G "Ninja" -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON $(Build.SourcesDirectory)
        displayName: "Configure osquery"
        workingDirectory: $(Build.BinariesDirectory)\build

      - script: |
          call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
          cmake --build .
        displayName: "Build osquery"
        workingDirectory: $(Build.BinariesDirectory)\build

      - powershell: |
          compress-archive -path "$(Build.BinariesDirectory)\build" -destinationpath "$(Build.ArtifactStagingDirectory)\build.zip" -compressionlevel NoCompression
        displayName: "Zip the build folder"
        workingDirectory: $(Build.BinariesDirectory)

      - task: PublishBuildArtifacts@1
        displayName: "Publish build folder for the next job"
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)/build.zip
          artifactName: windows-osquery-build


  - job: WindowsTest

    pool:
      vmImage: vs2017-win2016

    dependsOn: WindowsBuild

    steps:
      - checkout: none

      - script: |
          choco install ninja
        displayName: Install the Ninja build system

      - task: DownloadBuildArtifacts@0
        displayName: "Download build folder"
        inputs:
          artifactName: windows-osquery-build
          downloadPath: $(Build.BinariesDirectory)

      - powershell: |
          expand-archive -path "windows-osquery-build/build.zip" -destinationpath "."
        displayName: "Unzip build folder"
        workingDirectory: $(Build.BinariesDirectory)

      - powershell: |
          ctest --build-nocmake -C Release -V
        displayName: "Run tests"
        workingDirectory: $(Build.BinariesDirectory)/build
        env:
          GTEST_COLOR: 1


  - job: WindowsPackaging
    condition: always()

    pool:
      vmImage: vs2017-win2016

    dependsOn: WindowsTest

    steps:
      - checkout: none

      - script: |
          choco install ninja
        displayName: Install the Ninja build system

      - task: DownloadBuildArtifacts@0
        displayName: "Download build folder"
        inputs:
          artifactName: windows-osquery-build
          downloadPath: $(Build.BinariesDirectory)

      - powershell: |
          expand-archive -path "windows-osquery-build/build.zip" -destinationpath "."
          rm windows-osquery-build/build.zip
        displayName: "Unzip build folder"
        workingDirectory: $(Build.BinariesDirectory)

      - powershell: |
          cpack -G WIX
          $Env:version = (gi osquery*.msi).name.split("{-}")[1]; echo "##vso[task.setvariable variable=version]$Env:version"
          $Env:package_name = (gi osquery*.msi).name; echo "##vso[task.setvariable variable=package_name]$Env:package_name"
          mkdir $(Build.ArtifactStagingDirectory)/package
          mv (gi osquery*.msi).name $(Build.ArtifactStagingDirectory)/package
        displayName: "Create package"
        workingDirectory: $(Build.BinariesDirectory)/build

      - task: UniversalPackages@0
        displayName: Publish MSI package to Artifact Feed
        inputs:
          command: publish
          publishDirectory: '$(Build.ArtifactStagingDirectory)/package'
          vstsFeedPublish: 'osql_releases'
          vstsFeedPackagePublish: '$(package_name)'
          packagePublishDescription: 'osql official Windows release version $(version)'
          versionOption: custom
          versionPublish: $(version)
# WINDOWS
