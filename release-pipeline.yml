trigger:
- release_test

jobs:

# LINUX

  - job: LinuxBuild
    pool:
      vmImage: 'Ubuntu-16.04'

    container: trailofbits/osql:ubuntu-18.04

    steps:
    - script: mkdir $(Build.BinariesDirectory)/build
      displayName: "Create build folder"

    - task: CMake@1
      displayName: "Configure osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_TESTING=ON -DPACKAGING_SYSTEM=DEB $(Build.SourcesDirectory)

    - task: CMake@1
      displayName: "Build osquery"
      inputs:
        workingDirectory: $(Build.BinariesDirectory)/build
        cmakeArgs: --build . -j 3

    - script: |
        tar -H posix -cf $(Build.ArtifactStagingDirectory)/build.tar build
      displayName: "Tar the build folder"
      workingDirectory: $(Build.BinariesDirectory)

    - script: |
        tar -H posix -cf $(Build.ArtifactStagingDirectory)/source.tar .
      displayName: "Tar the source folder"
      workingDirectory: $(Build.SourcesDirectory)

    - task: PublishBuildArtifacts@1
      displayName: "Publish build folder for the next job"
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)/build.tar
        artifactName: linux-osquery-build

    - task: PublishBuildArtifacts@1
      displayName: "Publish source folder for the packaging job"
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)/source.tar
        artifactName: linux-osquery-source

  - job: LinuxTest

    pool:
      vmImage: 'Ubuntu-16.04'

    container: trailofbits/osql:ubuntu-18.04

    dependsOn: LinuxBuild

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      displayName: "Download build folder"
      inputs:
        artifactName: linux-osquery-build
        downloadPath: $(Build.BinariesDirectory)

    - script: |
        tar -xvf linux-osquery-build/build.tar -C $(Build.BinariesDirectory)
      displayName: "Untar build folder"
      workingDirectory: $(Build.BinariesDirectory)

    - script: |
        ctest --build-nocmake -V
      displayName: "Run tests"
      workingDirectory: $(Build.BinariesDirectory)/build
      env:
        GTEST_COLOR: 1

  - job: LinuxPackaging
    condition: always()

    pool:
      vmImage: 'Ubuntu-16.04'

    container: trailofbits/osql:ubuntu-18.04

    dependsOn: LinuxTest

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      displayName: "Download build folder"
      inputs:
        artifactName: linux-osquery-build
        downloadPath: $(Build.BinariesDirectory)

    - task: DownloadBuildArtifacts@0
      displayName: "Download source folder"
      inputs:
        artifactName: linux-osquery-source
        downloadPath: $(Build.BinariesDirectory)

    - script: |
        tar -xvf linux-osquery-build/build.tar -C $(Build.BinariesDirectory)
      displayName: "Untar build folder"
      workingDirectory: $(Build.BinariesDirectory)

    - script: |
        tar -xvf linux-osquery-source/source.tar -C $(Build.SourcesDirectory)
      displayName: "Untar source folder"
      workingDirectory: $(Build.BinariesDirectory)

    - script: |
        cmake --build . --target package -j 3
        version=`dpkg-deb -f osquery*.deb Version`; echo -n '##vso[task.setvariable variable=version]'; echo $version
        mkdir $(Build.ArtifactStagingDirectory)/package
        mv osquery*.deb $(Build.ArtifactStagingDirectory)/package
      displayName: "Create package"
      workingDirectory: $(Build.BinariesDirectory)/build

    - task: UniversalPackages@0
      displayName: Publish DEB package to Artifact Feed
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)/package'
        vstsFeedPublish: 'osql_releases'
        vstsFeedPackagePublish: 'osquery'
        packagePublishDescription: 'osquery'
        versionOption: custom
        versionPublish: $(version)


# LINUX

# # MACOS

#   - job: macOSBuild

#     pool:
#       vmImage: macos-10.14

#     steps:
#       - script: |
#           brew upgrade
#           brew install llvm@6
#         displayName: "Install Homebrew and prerequisites"
#         timeoutInMinutes: 20

#       - script: mkdir $(Build.BinariesDirectory)/build
#         displayName: "Create build folder"

#       - task: CMake@1
#         displayName: "Configure osquery"
#         inputs:
#           workingDirectory: $(Build.BinariesDirectory)/build
#           cmakeArgs: -DCMAKE_BUILD_TYPE=Release cmake ../src -DCMAKE_C_COMPILER=/usr/local/opt/llvm@6/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm@6/bin/clang++ -DBUILD_TESTING=ON $(Build.SourcesDirectory)

#       - task: CMake@1
#         displayName: "Build osquery"
#         inputs:
#           workingDirectory: $(Build.BinariesDirectory)/build
#           cmakeArgs: --build . -j 3

#       - task: CopyFiles@2
#         displayName: "Copy build folder to staging directory"
#         inputs:
#           sourceFolder: $(Build.BinariesDirectory)
#           contents: |
#             build/**/CTestTestfile.cmake
#             build/**/*-test
#             build/test_configs/**
#           targetFolder: $(Build.ArtifactStagingDirectory)

#       - script: |
#           cd $(Build.ArtifactStagingDirectory)
#           tar -cf build.tar build
#         displayName: "Tar the build folder"

#       - task: PublishBuildArtifacts@1
#         displayName: "Publish build folder for the next job"
#         inputs:
#           pathtoPublish: $(Build.ArtifactStagingDirectory)/build.tar
#           artifactName: macos-osquery-build

#   - job: macOSTest

#     pool:
#       vmImage: macos-10.14

#     dependsOn: macOSBuild

#     steps:
#     - checkout: none

#     - task: DownloadBuildArtifacts@0
#       displayName: "Download build folder"
#       inputs:
#         artifactName: macos-osquery-build
#         downloadPath: $(Build.BinariesDirectory)

#     - script: |
#         mv $(Build.BinariesDirectory)/macos-osquery-build/build.tar $(Build.BinariesDirectory)/build.tar
#         rmdir $(Build.BinariesDirectory)/macos-osquery-build
#       displayName: "Move build folder to the original path"

#     - script: |
#         cd $(Build.BinariesDirectory)
#         tar -xvf $(Build.BinariesDirectory)/build.tar
#       displayName: "Untar build folder"

#     - script: |
#         cd $(Build.BinariesDirectory)/build
#         ctest --build-nocmake -V
#       displayName: "Run tests"
#       env:
#         GTEST_COLOR: 1
# # MACOS

# # WINDOWS

#   - job: WindowsBuild

#     pool:
#       vmImage: vs2017-win2016

#     steps:
#     - powershell: |
#         mkdir $(Build.BinariesDirectory)\build
#       displayName: "Create build folder"

#     - task: CMake@1
#       displayName: "Configure osquery"
#       inputs:
#         workingDirectory: $(Build.BinariesDirectory)\build
#         cmakeArgs: -G "Visual Studio 15 2017 Win64" -T host=x64 -DBUILD_TESTING=ON $(Build.SourcesDirectory)

#     - task: CMake@1
#       displayName: "Build osquery"
#       inputs:
#         workingDirectory: $(Build.BinariesDirectory)\build
#         cmakeArgs: --build . -j 3 --config Release

#     - task: CopyFiles@2
#       displayName: "Copy build folder to staging directory"
#       inputs:
#         sourceFolder: $(Build.BinariesDirectory)
#         contents: |
#           build/**/CTestTestfile.cmake
#           build/**/*-test.exe
#           build/test_configs/**
#         targetFolder: $(Build.ArtifactStagingDirectory)

#     - task: PublishBuildArtifacts@1
#       displayName: "Publish build folder for the next job"
#       inputs:
#         pathtoPublish: $(Build.ArtifactStagingDirectory)
#         artifactName: windows-osquery-build

#   - job: WindowsTest

#     pool:
#       vmImage: vs2017-win2016

#     dependsOn: WindowsBuild

#     steps:
#     - checkout: none

#     - task: DownloadBuildArtifacts@0
#       displayName: "Download build folder"
#       inputs:
#         artifactName: windows-osquery-build
#         downloadPath: $(Build.BinariesDirectory)

#     - powershell: |
#         mv $(Build.BinariesDirectory)/windows-osquery-build/build $(Build.BinariesDirectory)/build
#         rmdir $(Build.BinariesDirectory)/windows-osquery-build
#       displayName: "Move build folder to the original path"

#     - powershell: |
#         cd $(Build.BinariesDirectory)/build
#         ctest --build-nocmake -C Release -V
#       displayName: "Run tests"
#       env:
#         GTEST_COLOR: 1
# # WINDOWS
